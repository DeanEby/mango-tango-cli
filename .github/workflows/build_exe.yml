name: Build Executables

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-?*"
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform_name: Windows
            artifact_name: windows
            os: windows-2022
            version_command: icacls "VERSION" /grant Everyone:F /T /C /Q
            move_command: move dist\mangotango.exe dist\mangotango_windows.exe
            sha_command: pwsh -c "Get-FileHash -Algorithm SHA1 dist\mangotango_windows.exe | Format-Table Hash -HideTableHeaders > dist\mangotango_windows.exe.sha1"
            list_command: dir dist
          - platform_name: MacOS 14
            artifact_name: macos-14
            os: macos-14
            move_command: mv dist/mangotango dist/mangotango_macos_14
            sha_command: shasum -a 1 dist/mangotango_macos_14 > dist/mangotango_macos_14.sha1
            list_command: ls -ll dist
          - platform_name: MacOS 15
            artifact_name: macos-15
            os: macos-15
            move_command: mv dist/mangotango dist/mangotango_macos_15
            sha_command: shasum -a 1 dist/mangotango_macos_15 > dist/mangotango_macos_15.sha1
            list_command: ls -ll dist

    name: Build ${{ matrix.platform_name }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ matrix.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Print version string (for tag)
        id: get_version_tag
        if: ${{ github.ref_type == 'tag' }}
        run: |
          python -c "with open('VERSION', 'w', encoding='utf-8') as f: f.write('${{ github.ref_name }}')"

      - name: Print version string (for branch)
        id: get_version_branch
        if: ${{ github.ref_type != 'tag' }}
        run: |
          python -c "with open('VERSION', 'w', encoding='utf-8') as f: f.write('${{ github.ref_name }}-${{ github.sha }}')"

      - name: Modify version string permission
        if: ${{ matrix.version_command }}
        run: ${{ matrix.version_command }}

      - name: Build the executable
        run: |
          pyinstaller pyinstaller.spec

      - name: Rename the executable to include platform suffix
        run: ${{ matrix.move_command }}

      - name: Compute the SHA1 hashsum
        run: ${{ matrix.sha_command }}

      - name: Sign the Executable (macOS)
        if: runner.os == 'macOS'
        env: 
          APPLE_DEV_EMAIL: ${{secrets.APPLE_DEV_EMAIL}}
          APP_SPEC_PASS: ${{secrets.APP_SPEC_PASS}}
          APPLE_APP_CERTIFICATE: ${{secrets.DEV_APP_CERT}}
          APPLE_APP_CERT_PASSWORD: ${{secrets.DEV_APP_CERT_PASS}}
          APPLE_INST_CERTIFICATE: ${{secrets.DEV_INST_CERT}}
          APPLE_INST_CERT_PASSWORD: ${{secrets.DEV_INST_CERT_PASS}}
          APPLE_TEAM_ID: ${{secrets.TEAM_ID}}
          APPLE_KEYCHAIN_PASS: ${{secrets.APPLE_KEY_PASS}}
          APP_ID: ${{secrets.APP_ID}}
          INST_ID: ${{secrets.INST_ID}}
        run: |
          echo "$APPLE_APP_CERTIFICATE" | base64 --decode > app_certificate.p12
          echo "$APPLE_INST_CERTIFICATE" | base64 --decode > inst_certificate.p12
          security create-keychain -p $APPLE_KEYCHAIN_PASS build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $APPLE_KEYCHAIN_PASS build.keychain
          security import app_certificate.p12 -k build.keychain -P $APPLE_APP_CERT_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $APPLE_KEYCHAIN_PASS build.keychain
          /usr/bin/codesign --force -s "$APP_ID" --timestamp -i "mangotango" dist/mangotango_macos_14


      - name: Inspect the dist/ directory before uploading artifacts
        run: ${{ matrix.list_command }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            dist/*

  sign:
    needs: build
    runs-on: macos-14
    env: 
      APPLE_DEV_EMAIL: ${{secrets.APPLE_DEV_EMAIL}}
      APP_SPEC_PASS: ${{secrets.APP_SPEC_PASS}}
      APPLE_APP_CERTIFICATE: ${{secrets.DEV_APP_CERT}}
      APPLE_APP_CERT_PASSWORD: ${{secrets.DEV_APP_CERT_PASS}}
      APPLE_INST_CERTIFICATE: ${{secrets.DEV_INST_CERT}}
      APPLE_INST_CERT_PASSWORD: ${{secrets.DEV_INST_CERT_PASS}}
      APPLE_TEAM_ID: ${{secrets.TEAM_ID}}


    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Import Apple Certificate
        run: |


      - name: Sign Executable
        run: codesign --force --timestamp --options runtime --sign "$TEAM_ID" artifacts/macos-14/mangotango_macos_14

      - name: Re-upload signed artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-macos-14
          path: artifacts/macos-14/*
          

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
