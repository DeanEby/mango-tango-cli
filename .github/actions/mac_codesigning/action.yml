name: 'MacOS Codesigning'
inputs:
  version:
    required: true
    type: string
  dev_email:
    required: true
    type: string
  key_pass:
    required: true
    type: string
  app_id:
    required: true
    type: string
  app_spec_pass:
    required: true
    type: string
  dev_app_cert:
    required: true
    type: string
  dev_app_cert_pass:
    required: true
    type: string
  dev_inst_cert:
    required: true
    type: string
  dev_inst_cert_pass:
    required: true
    type: string
  inst_id:
    required: true
    type: string
  team_id:
    required: true
    type: string
runs:
  using: "composite"
  steps:
    - name: Create macOS keychain
      if: runner.os == 'macOS'
      shell: bash
      env: 
        APPLE_DEV_EMAIL: ${{inputs.dev_email}}
        APP_SPEC_PASS: ${{inputs.app_spec_pass}}
        APPLE_APP_CERTIFICATE: ${{inputs.dev_app_cert}}
        APPLE_APP_CERT_PASSWORD: ${{inputs.dev_app_cert_pass}}
        APPLE_INST_CERTIFICATE: ${{inputs.dev_inst_cert}}
        APPLE_INST_CERT_PASSWORD: ${{inputs.dev_inst_cert_pass}}
        APPLE_KEYCHAIN_PASS: ${{inputs.key_pass}}
      run: |
        echo "$APPLE_APP_CERTIFICATE" | base64 --decode > app_certificate.p12
        echo "$APPLE_INST_CERTIFICATE" | base64 --decode > inst_certificate.p12
        security create-keychain -p $APPLE_KEYCHAIN_PASS build.keychain
        security default-keychain -s build.keychain
        security set-keychain-settings -lut 21600 build.keychain
        security unlock-keychain -p $APPLE_KEYCHAIN_PASS build.keychain
        security import app_certificate.p12 -k build.keychain -P $APPLE_APP_CERT_PASSWORD -T /usr/bin/codesign
        security import inst_certificate.p12 -k build.keychain -P $APPLE_INST_CERT_PASSWORD -T /usr/bin/productsign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $APPLE_KEYCHAIN_PASS build.keychain

    - name: Sign mac executable
      if: runner.os == 'macOS'
      shell: bash
      env:
        APP_ID: ${{inputs.app_id}}
      run: |
        /usr/bin/codesign --force -s "$APP_ID" --timestamp -i "org.mangotango.cli" --options runtime --entitlements "mango.entitlements" "dist/mangotango_${{inputs.version}}"
        codesign -vvv dist/mangotango_${{inputs.version}}

    - name: Create and sign mac package
      if: runner.os == 'macOS'
      shell: bash
      env:
        INST_ID: ${{inputs.inst_id}}
        APPLE_KEYCHAIN_PASS: ${{inputs.key_pass}}
      run: |
        mkdir -p /tmp/mangotango/
        ditto dist/mangotango_${{inputs.version}} /tmp/mangotango/mangotango
        chmod +x /tmp/mangotango/mangotango
        security unlock-keychain -p $APPLE_KEYCHAIN_PASS build.keychain
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$APPLE_KEYCHAIN_PASS" build.keychain
        pkgbuild --identifier "org.mangotango.cli" --timestamp --root /tmp/mangotango --install-location /Applications "dist/mangotango_${{inputs.version}}.pkg"
        productsign --timestamp --sign "$INST_ID" dist/mangotango_${{inputs.version}}.pkg dist/mangotango_${{inputs.version}}_signed.pkg
      
    - name: Notarize Mac package
      if: runner.os == 'macOS'
      shell: bash
      env:
        APPLE_DEV_EMAIL: ${{inputs.dev_email}}
        APPLE_TEAM_ID: ${{inputs.team_id}}
        APP_SPEC_PASS: ${{inputs.app_spec_pass}}
      run: xcrun notarytool submit dist/mangotango_${{inputs.version}}_signed.pkg --apple-id $APPLE_DEV_EMAIL --team-id $APPLE_TEAM_ID --password $APP_SPEC_PASS --wait > notarization_output.txt
      
    - name: Staple the notarization ticket
      if: runner.os == 'macOS'
      shell: bash
      run: |
        xcrun stapler staple dist/mangotango_${{inputs.version}}_signed.pkg

    - name: Clean up macOS Artifacts
      if: runner.os == 'macOS'
      shell: bash
      run: |
        rm -rf /tmp/mangotango
        rm -rf dist/mangotango_${{inputs.version}}
        rm -rf dist/mangotango_${{inputs.version}}.pkg
        mv dist/mangotango_${{inputs.version}}_signed.pkg dist/mangotango_${{inputs.version}}.pkg